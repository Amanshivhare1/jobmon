import os
import re
import pandas as pd

def extract_dtsx_from_bat(bat_file):
    dtsx_files = []
    try:
        with open(bat_file, "r") as f:
            content = f.read()
            matches = re.findall(r'[\w\-. ]+\.dtsx', content, flags=re.IGNORECASE)
            dtsx_files.extend(matches)
    except Exception as e:
        print(f"Error reading {bat_file}: {e}")
    return dtsx_files


def get_dtsx_from_path(path):
    dtsx_files = []

    if os.path.isfile(path):
        if path.lower().endswith(".dtsx"):
            dtsx_files.append(os.path.basename(path))
        elif path.lower().endswith(".bat"):
            dtsx_files.extend(extract_dtsx_from_bat(path))

    elif os.path.isdir(path):
        for file in os.listdir(path):
            if file.lower().endswith(".dtsx"):
                dtsx_files.append(file)

    return dtsx_files


def process_excel(input_excel, output_excel):
    df = pd.read_excel(input_excel)

    # Assuming column name is "Path"
    df["DTSX_Files"] = df["Path"].apply(
        lambda p: "; ".join(get_dtsx_from_path(p))
    )

    df.to_excel(output_excel, index=False)
    print(f"âœ… Processed Excel saved as: {output_excel}")


# Example usage
process_excel("input.xlsx", "output_with_dtsx.xlsx")




----------------------------------------------------------

import paramiko

def get_remote_disks(host, user, password):
    command = "df -h --output=target,size,used,avail,pcent | tail -n +2"
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    ssh.connect(host, username=user, password=password)
    stdin, stdout, stderr = ssh.exec_command(command)
    output = stdout.read().decode().strip()
    ssh.close()

    print(f"\nServer: {host}")
    print(f"{'Mount':<15} {'Total':>10} {'Used':>10} {'Avail':>10} {'Use%':>6}")
    print("-" * 55)
    for line in output.splitlines():
        print(line)

if __name__ == "__main__":
    get_remote_disks("192.168.1.10", "ec2-user", "mypassword")

--------------------------------
for /f "skip=1 tokens=1,2,3" %i in ('wmic logicaldisk get Name,Size,FreeSpace') do @if not "%i"=="" @set /a totalGB=%j/1073741824 & @set /a freeGB=%k/1073741824 & @echo Drive: %i  Total: !totalGB! GB  Free: !freeGB! GB

--------------------------------
import wmi

def get_windows_disk_space(host, user, password):
    conn = wmi.WMI(computer=host, user=user, password=password)
    print(f"\nDisk space for {host}:")
    print(f"{'Drive':<6} {'Total(GB)':>10} {'Free(GB)':>10}")
    print("-" * 30)
    for disk in conn.Win32_LogicalDisk(DriveType=3):  # DriveType=3 is local disks
        total_gb = int(disk.Size) // (2**30)
        free_gb = int(disk.FreeSpace) // (2**30)
        print(f"{disk.DeviceID:<6} {total_gb:>10} {free_gb:>10}")

if __name__ == "__main__":
    host = input("Enter Windows server IP/hostname: ")
    user = input("Username (DOMAIN\\User): ")
    password = input("Password: ")
    get_windows_disk_space(host, user, password)
